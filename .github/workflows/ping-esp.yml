name: ESP32 pull

on:
  workflow_dispatch:
    inputs:
      override_base:
        description: "Override base URL (es: http://79.21.55.245:1234)"
        required: false
        default: ""
  schedule:
    - cron: "*/5 * * * *"

permissions:
  contents: write

concurrency:
  group: esp32-pull
  cancel-in-progress: true

jobs:
  pull:
    runs-on: ubuntu-latest
    env:
      ESP_BASE: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.override_base != '' && github.event.inputs.override_base || secrets.ESP_BASE }}
      ESP_USER: ${{ secrets.ESP_USER }}
      ESP_PASS: ${{ secrets.ESP_PASS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Prepare BASE (strip trailing /)
        id: prep
        run: |
          set -euo pipefail
          BASE="${ESP_BASE%/}"
          if [ -z "${BASE}" ]; then
            echo "::error::ESP_BASE non impostata (né override né secret)"
            exit 1
          fi
          echo "BASE=$BASE" >> "$GITHUB_ENV"
          echo "Using BASE=$BASE"

      - name: Ping (verbose, con retry)
        id: ping
        continue-on-error: true
        run: |
          set -euxo pipefail
          url="$BASE/api/ping"
          if [ -n "${ESP_USER:-}" ] && [ -n "${ESP_PASS:-}" ]; then auth=(-u "$ESP_USER:$ESP_PASS"); else auth=(); fi
          tries=4
          for i in $(seq 1 $tries); do
            echo "→ [$i/$tries] GET $url"
            http_code=$(curl -sS -o ping.txt -w "%{http_code}" "${auth[@]}" "$url" || echo 0)
            echo "HTTP_CODE=$http_code"
            echo "Body:"; cat ping.txt || true
            if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
              echo "ok=1" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            sleep 3
          done
          echo "::warning::Ping non riuscito (HTTP $http_code). Skip del resto."
          echo "ok=0" >> "$GITHUB_OUTPUT"

      - name: Fetch /api/state
        if: steps.ping.outputs.ok == '1'
        run: |
          set -euxo pipefail
          url="$BASE/api/state"
          if [ -n "${ESP_USER:-}" ] && [ -n "${ESP_PASS:-}" ]; then auth=(-u "$ESP_USER:$ESP_PASS"); else auth=(); fi
          curl -sS --connect-timeout 10 --max-time 30 "${auth[@]}" "$url" -o state.json
          jq type state.json
          ts_raw=$(date -u +%Y%m%dT%H%M%SZ)
          mkdir -p states/raw
          cp state.json "states/raw/state_$ts_raw.json"

      - name: Append CSV (+ copy to docs)
        if: steps.ping.outputs.ok == '1'
        run: |
          set -euo pipefail
          mkdir -p states docs
          csv="states/metrics.csv"
          if [ ! -s "$csv" ]; then
            echo "timestamp,soil1,soil2,sens_suolo_anal1,sens_suolo_anal2,t_air_ds,t_soil_ds,bme_t,bme_rh,bme_p,bme_iaq,bme_static_iaq,bme_co2eq,bme_voc,bme_gas_pct,bme_gas_raw,vbat,vpv,ppv,flow_lph,flow_total,valve1,valve2,rtc_epoch_esp32" > "$csv"
          fi
          ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          jq -r --arg ts "$ts" '
            [
              $ts,
              (.soil1 // 0),
              (.soil2 // 0),
              (.sens_suolo_anal1 // 0),
              (.sens_suolo_anal2 // 0),
              (.t_air_ds // null),
              (.t_soil_ds // null),
              (.bme_t // null),
              (.bme_rh // null),
              (.bme_p // null),
              (.bme_iaq // null),
              (.bme_static_iaq // null),
              (.bme_co2eq // null),
              (.bme_voc // null),
              (.bme_gas_pct // null),
              (.bme_gas_raw // null),
              (.vbat // null),
              (.vpv // null),
              (.ppv // null),
              (.flow_lph // null),
              (.flow_total // null),
              (.valve1 // null),
              (.valve2 // null),
              (.rtc_epoch_esp32 // null)
            ] | @csv
          ' state.json >> "$csv"
          cp "$csv" docs/metrics.csv
          head -1 docs/metrics.csv || true

      - name: Commit & push (safe rebase + retry)
        if: steps.ping.outputs.ok == '1'
        run: |
          set -euxo pipefail
          git config user.name  "gh-actions"
          git config user.email "actions@github.com"

          git add states/metrics.csv states/raw/*.json docs/metrics.csv || true
          git commit -m "ESP32 pull: $(date -u +%F' '%T) UTC" || { echo "Nothing to commit"; exit 0; }

          BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          git fetch origin "$BRANCH"

          tries=3
          for i in $(seq 1 $tries); do
            git pull --rebase origin "$BRANCH" || { git rebase --abort || true; }
            if git push; then
              echo "Pushed on try $i"
              exit 0
            fi
            echo "Retry $i/$tries…"
            sleep 2
          done

          echo "::error::Push failed after $tries attempts"
          exit 1
