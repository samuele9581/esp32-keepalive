name: Ping ESP32

on:
  workflow_dispatch:

jobs:
  ping:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Sanity
        run: |
          set -x
          bash --version
          which curl

      - name: Check secrets
        run: |
          test -n "${{ secrets.ESP_BASE }}" || { echo "❌ ESP_BASE mancante"; exit 1; }

      - name: Ping endpoint
        env:
          ESP_BASE:     ${{ secrets.ESP_BASE }}      # es. http://miohost.dynu.net:8081
          ESP_USER:     ${{ secrets.ESP_USER }}      # opzionale (Basic Auth)
          ESP_PASS:     ${{ secrets.ESP_PASS }}      # opzionale
          ESP_INSECURE: ${{ secrets.ESP_INSECURE }}  # "true" se https con cert non valido
        run: |
          set -euo pipefail

          BASE="$ESP_BASE"
          [[ "$BASE" =~ ^https?:// ]] || { echo "ESP_BASE deve iniziare con http:// o https://"; exit 1; }

          # Opzioni curl (niente array: massima compatibilità)
          OPTS="-sS -L --connect-timeout 8 --max-time 20 --retry 2 --retry-connrefused"
          if [[ -n "${ESP_USER:-}" && -n "${ESP_PASS:-}" ]]; then
            OPTS="$OPTS -u ${ESP_USER}:${ESP_PASS}"
          fi
          if [[ "$BASE" == https://* && "${ESP_INSECURE:-}" == "true" ]]; then
            OPTS="$OPTS -k"
          fi

          echo "# GET $BASE/api/ping"
          code=$(bash -lc "curl $OPTS -o /dev/null -w '%{http_code}' \"$BASE/api/ping?t=\$(date +%s)\"")
          echo "HTTP $code"
          [[ "$code" == 2* ]] || { echo "❌ ping fallito"; exit 1; }

      - name: Scarica /api/state e pubblica artifact
        if: ${{ always() }}
        env:
          ESP_BASE:     ${{ secrets.ESP_BASE }}
          ESP_USER:     ${{ secrets.ESP_USER }}
          ESP_PASS:     ${{ secrets.ESP_PASS }}
          ESP_INSECURE: ${{ secrets.ESP_INSECURE }}
        run: |
          set -e
          OPTS="-sS -L --connect-timeout 8 --max-time 30"
          if [[ -n "${ESP_USER:-}" && -n "${ESP_PASS:-}" ]]; then OPTS="$OPTS -u ${ESP_USER}:${ESP_PASS}"; fi
          if [[ "$ESP_BASE" == https://* && "${ESP_INSECURE:-}" == "true" ]]; then OPTS="$OPTS -k"; fi
          mkdir -p out
          bash -lc "curl $OPTS -o out/state.json \"$ESP_BASE/api/state\" || true"
          ls -l out || true

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: state-json
          path: out/state.json
