name: Irrigazione - Pull metrics

on:
  schedule:
    - cron: "*/5 * * * *"   # ogni 5 minuti
  workflow_dispatch:

jobs:
  pull:
    runs-on: ubuntu-latest
    env:
      ESP_BASE: ${{ secrets.ESP_BASE }}
      ESP_USER: ${{ secrets.ESP_USER }}
      ESP_PASS: ${{ secrets.ESP_PASS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ping (verbose)
        id: ping
        run: |
          set -euxo pipefail
          url="$ESP_BASE/api/ping"
          auth=()
          if [ -n "${ESP_USER:-}" ] && [ -n "${ESP_PASS:-}" ]; then
            auth=(-u "$ESP_USER:$ESP_PASS")
          fi
          echo "â†’ GET $url"
          # verbose per debug; non fallire qui, solo raccogli il codice
          code=$(curl -v --connect-timeout 10 --max-time 15 -o /dev/null -w "%{http_code}" "${auth[@]}" "$url" || echo 0)
          echo "HTTP_CODE=$code"
          if [ "$code" -lt 200 ] || [ "$code" -ge 300 ]; then
            echo "::error::Ping failed with HTTP $code"
            exit 1
          fi

      - name: Scarica /api/state
        run: |
          set -euxo pipefail
          auth=()
          if [ -n "${ESP_USER:-}" ] && [ -n "${ESP_PASS:-}" ]; then
            auth=(-u "$ESP_USER:$ESP_PASS")
          fi
          curl -sS --connect-timeout 10 --max-time 20 "${auth[@]}" "$ESP_BASE/api/state" -o state.json
          jq 'keys' state.json || true   # stampa le chiavi disponibili (per debug)

      - name: Appendi riga CSV (timestamp + alcune metriche)
        run: |
          python3 - << 'PY'
          import json, time, os
          j=json.load(open('state.json'))
          fields=["t_air_ds","t_soil_ds","soil1","soil2","bme_t","bme_rh","bme_voc","bme_co2eq","vpv","ppv","vbat"]
          ts=int(time.time())
          row=[str(ts)]+[("" if j.get(k) is None else str(j.get(k))) for k in fields]
          line=",".join(row)+"\n"
          fn="metrics.csv"
          # header se file nuovo
          if not os.path.exists(fn):
            open(fn,"w").write("ts,"+",".join(fields)+"\n")
          open(fn,"a").write(line)
          print(line.strip())
          PY

      - name: Commit CSV
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "metrics: update"
          file_pattern: metrics.csv
