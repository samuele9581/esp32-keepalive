name: Ping ESP (diag)
on: workflow_dispatch

jobs:
  ping:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Show env
        run: |
          set -x
          bash --version
          which curl
          echo "ESP_BASE=${{ secrets.ESP_BASE }}"

      - name: Resolve & TCP connect
        env:
          ESP_BASE: ${{ secrets.ESP_BASE }}
        run: |
          set -e
          python3 - <<'PY'
          import os, socket, urllib.parse, sys
          u=os.environ['ESP_BASE']
          p=urllib.parse.urlparse(u)
          host=p.hostname; port=p.port or (80 if p.scheme=='http' else 443)
          print("URL:", u)
          print("Host:", host, "Port:", port)
          try:
            addrs = socket.getaddrinfo(host, port)
            print("DNS:", [a[4][0] for a in addrs])
          except Exception as e:
            print("DNS ERROR:", e); sys.exit(2)
          s=socket.socket(); s.settimeout(8)
          try:
            s.connect((host, port)); print("TCP CONNECT OK")
          except Exception as e:
            print("TCP ERROR:", e); sys.exit(3)
          finally:
            s.close()
          PY

      - name: Curl /api/ping (verbose)
        env:
          ESP_BASE:     ${{ secrets.ESP_BASE }}      # es. http://miohost.dynu.net:8081
          ESP_USER:     ${{ secrets.ESP_USER }}      # se usi Basic Auth
          ESP_PASS:     ${{ secrets.ESP_PASS }}
          ESP_INSECURE: ${{ secrets.ESP_INSECURE }}  # "true" per HTTPS self-signed
        run: |
          set -o pipefail
          OPTS="-v --connect-timeout 8 --max-time 20 --retry 1 --retry-connrefused"
          if [[ -n "${ESP_USER:-}" && -n "${ESP_PASS:-}" ]]; then OPTS="$OPTS -u ${ESP_USER}:${ESP_PASS}"; fi
          if [[ "$ESP_BASE" == https://* && "${ESP_INSECURE:-}" == "true" ]]; then OPTS="$OPTS -k"; fi

          mkdir -p out
          curl $OPTS "$ESP_BASE/api/ping?t=$(date +%s)" -D out/headers.txt -o out/body.txt || true

          echo "----- HEADERS"; cat out/headers.txt || true
          echo "----- BODY";    cat out/body.txt    || true

          code=$(awk 'toupper($1)=="HTTP/"{c=$2} END{print c+0}' out/headers.txt)
          echo "HTTP code: $code"
          if [[ $code -lt 200 || $code -ge 300 ]]; then
            echo "::error::Ping failed with HTTP $code"
            exit 1
          fi

      - name: Fetch /api/state (best effort)
        if: ${{ always() }}
        env:
          ESP_BASE:     ${{ secrets.ESP_BASE }}
          ESP_USER:     ${{ secrets.ESP_USER }}
          ESP_PASS:     ${{ secrets.ESP_PASS }}
          ESP_INSECURE: ${{ secrets.ESP_INSECURE }}
        run: |
          OPTS="-sS -L --connect-timeout 8 --max-time 30"
          if [[ -n "${ESP_USER:-}" && -n "${ESP_PASS:-}" ]]; then OPTS="$OPTS -u ${ESP_USER}:${ESP_PASS}"; fi
          if [[ "$ESP_BASE" == https://* && "${ESP_INSECURE:-}" == "true" ]]; then OPTS="$OPTS -k"; fi
          curl $OPTS -o out/state.json "$ESP_BASE/api/state" || true
          ls -l out || true

      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: diag-output
          path: out
